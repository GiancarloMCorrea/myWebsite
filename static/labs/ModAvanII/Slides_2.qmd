---
title: "Modelos avanzados en evaluación de recursos pesqueros: Día 2"
author: 
   <br>Dr. Giancarlo M. Correa
institute:
   <br>Cousteau Consultant Group
format:
  revealjs:
    theme: simple
    logo: images/CGlogo1.png
    slide-number: 'c/t'
    css: myStyle.css
from: markdown+emoji
editor: visual
execute:
  echo: true
bibliography: "https://api.citedrive.com/bib/b63ac242-a77c-4816-9c27-fcdfb31875b0/references.bib?x=eyJpZCI6ICJiNjNhYzI0Mi1hNzdjLTQ4MTYtOWMyNy1mY2RmYjMxODc1YjAiLCAidXNlciI6ICI1NDQwIiwgInNpZ25hdHVyZSI6ICIyMTMxYjVhZDk1NGYxNDUzYjk3YjZiNjk3ZDIxZWEwODIwZjA4MTBiZTk3YWIxOTNiMGVkMzI1YzI0YTRjZWNkIn0=/bibliography.bib"
---

# The Woods Hole Assessment Model (WHAM)

<!-- Install this version of knitr or update RStudio-->

<!-- remotes::install_version("knitr", "1.42") -->

## WHAM: Introducción

<br>

::: incremental
-   Modelo de evaluación estructurado por edades con enfoque SSM [@Stock_2021].
-   Implementado en TMB y R, sencillo aprendizaje para R-users.
-   Desarrollado a partir de [ASAP3](https://noaa-fisheries-integrated-toolbox.github.io/ASAP).
-   [Website](https://timjmiller.github.io/wham/).
-   [WHAM Github repository](https://github.com/timjmiller/wham) (ver *branches*).
-   Versión para este curso: [WHAM *growth* branch](https://github.com/GiancarloMCorrea/wham/tree/growth).
:::

## WHAM: Introducción

<br>

-   Antes de @Stock_2021, varios estudios ya habían ido publicando los inicios de WHAM:
    -   @Stock_2021b
    -   @Miller_2018b
    -   @Miller_2018
    -   @Miller_2016

## WHAM: Requerimientos

Se require lo siguiente:

::: incremental
-   Disponibilidad de datos y conocimiento del stock.
-   Solo se usa R para la implementación de un modelo.
-   Se recomienda conocimiento básico en TMB.
-   Conocimiento de las ecuaciones de dinámica poblacional en WHAM.
:::

::: fragment
::: callout-warning
## Recomendación

Si **solo** se tienen datos de captura e índices de abundancia, se recomienda usar otras plataformas, por ejemplo: SPiCT [@Pedersen_2016], [REMA](https://github.com/afsc-assessments/rema).
:::
:::

## WHAM: Datos

Con la nueva extensión de WHAM [@Correa_2023], podemos incluir los siguientes tipos de datos por año y flota (pesquerías e índices):

-   Captura total (solo para pesquerías)
-   Índices de abundancia (solo para índices)
-   Composición por edades y tallas
-   Conditional age-at-length (CAAL)
-   Variables ambientales
-   Matrix de error de edad
-   Peso medio a la edad

## WHAM: Secciones

Modelamiento de las siguientes secciones de la dinámica poblacional del stock:

-   Reclutamiento (abundancia a la edad)
-   Selectividad
-   Mortalidad natural
-   Capturabilidad
-   Variables ambientales
-   Crecimiento somático

## WHAM: Implementar un modelo

1.  Crear una lista en R con los datos de entrada:

<br>

```{r eval = FALSE}
input_data = list()
input_data$ages # Vector con edades 
input_data$catch_paa # Matrix con determinadas dimensiones 
input_data$index_paa # Matrix con determinadas dimensiones
# Y asi para capturas, composición de tallas, etc.
```

## WHAM: Implementar un modelo

1.  Crear una lista en R con los datos de entrada:

::: {.callout-important icon="false"}
## Importante

-   La palabra `catch` ó `fleet` se refiere a las pesquerías y `index` a los índices (e.g., cruceros).
-   No es necesario especificar todos los *slots*. Si algún *slot* no es especificado, este tomará el valor por defecto.
-   Las dimensiones son estrictas (no mucha flexibilidad).
-   Los datos de entrada también puede ser especificado a partir de un archivo *ASAP3*.
:::

## WHAM: Implementar un modelo

2.  Crear el objeto de entrada para WHAM:

```{r eval = FALSE}
my_input = wham::prepare_wham_input(model_name = "Example_1",
                         basic_info = input_data, 
                         NAA_re = list(), # Recruitment parameters
                         M = list(), # M parameter
                         selectivity = list(), # Selectivity parameter
                         catchability = list(), # Catchability parameter
                         ecov = list(), # Environmental information
                         # Crecimiento somatico:
                         growth = list(), LAA = list(), # Mean length-at-age
                         LW = list(), # Length-weight relationship
                         WAA = list(), # Mean weight-at-age
                         age_comp = "multinomial", # Age composition model
                         len_comp = "multinomial" # Length composition model
                         ) 
```

## WHAM: Pasos para implementar un modelo

2.  Crear el objeto de entrada para WHAM:

::: {.callout-important icon="false"}
## Importante

-   Al igual que para los datos de entrada, no necesitamos especificar todos los argumentos de `prepare_wham_input`. Si un argumento no es especificado, tomará el valor por defecto.
-   En el slide anterior, en el `list()` de cada argumento especificamos la información de cada parámetro.
:::

## WHAM: Implementar un modelo

<br>

Veremos que `my_input` tiene 4 principales *slots*:

```{r eval = FALSE}
my_input$data # datos
my_input$par # informacion de parametros
my_input$map # estimar/no estimar parametros
my_input$random # variables aleatorias
```

<br>

::: fragment
3.  Opcional: Fijar algunos parámetros

```{r eval = FALSE}
# Por ejemplo, podemos fijar sigma R:
my_input$map$log_NAA_sigma = factor(NA)
```
:::

## WHAM: Implementar un modelo

<br>

4.  Correr el modelo

```{r eval = FALSE}
my_model = wham::fit_wham(my_input)
```

<br>

::: fragment
5.  Analizar resultados

```{r eval = FALSE}
wham::plot_wham_output(my_model)
```
:::

# Datos de entrada

## Información básica

<br>

```{r eval = FALSE}
input_data = list()
input_data$ages = 1:10 # edades
input_data$lengths = seq(from = 2, to = 120, by = 2) # tallas
input_data$years = 1971:2020 # years
input_data$n_fleets = 1 # numero de pesquerias
input_data$n_indices = 1 # numero de indices
```

## Información de pesquería

<br>

Primero calculemos el número de años, edades, y tallas para hacer el resto más sencillo:

```{r eval = FALSE}
n_years = length(input_data$years)
n_ages = length(input_data$ages)
n_lengths = length(input_data$lengths)
```

## Información de pesquería

```{r eval = FALSE}
# Captura agregada:
input_data$agg_catch = matrix(mis_datos, ncol = input_data$n_fleets, nrow = n_years) # Obs
input_data$catch_cv = matrix(mis_datos, ncol = input_data$n_fleets, nrow = n_years) # Obs error
# Composicion por edades (proporcion)
input_data$catch_paa = array(mis_datos, dim = c(input_data$n_fleets, n_years, n_ages)) # Obs
input_data$catch_Neff = matrix(mis_datos, ncol = input_data$n_fleets, nrow = n_years) # Obs error
# Composicion por tallas (proporcion)
input_data$catch_pal = array(mis_datos, dim = c(input_data$n_fleets, n_years, n_lengths)) # Obs
input_data$catch_NeffL = matrix(mis_datos, ncol = input_data$n_fleets, nrow = n_years) # Obs error
# Conditional age-at-length (CAAL, proporcion)
input_data$catch_caal = array(mis_datos, dim = c(input_data$n_fleets, n_years, n_lengths, n_ages)) # Obs
input_data$catch_caal_Neff = array(mis_datos, dim = c(n_years, input_data$n_fleets, n_lengths)) # Obs error
# Aging error matrix
input_data$catch_aging_error = array(mis_datos, dim = c(input_data$n_fleets, n_ages, n_ages)) 
```

::: fragment
::: callout-warning
## Cuidado

No es posible tener captura agregada igual a 0, se sugiere especificar un número pequeño.
:::
:::

## Muestreo

Para un viaje de pesca o un lance de un crucero de investigación:

```{r}
#| echo: false
DiagrammeR::grViz("digraph {

graph [layout = dot, rankdir = LB]

# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen, fontsize=30]

C1 [label = 'Captura total', fillcolor = Pink]
CAL [label = 'Muestreo de tallas', fillcolor = Pink]
CAL2 [label = 'Composición por tallas', fillcolor = lightskyblue2]
CAAL [label = 'Submuestreo de edades', fillcolor = Pink]
OTO [label =  'Obtención de otolitos \n Talla-edad', fillcolor = Pink]

{rank = min; C1}
{rank = same; CAL CAL2}

# edge definitions with the node IDs
C1 -> CAL
CAL -> CAL2
CAL  -> CAAL
CAAL  -> OTO

}")
```

## Muestreo

Después de muestrear muchos viajes de pesca o lances en un crucero, se suele construir una clave talla-edad (probabilidad de ser cierta edad dada la talla):

![](images/D2_img0.jpg){fig-align="center" width="100%"}

## Muestreo

Finalmente, con los datos de la clave talla-edad y composición por talla por viaje o lance, se calcula la *composición por edades* por viaje o lance. Luego se realiza una expansión para todo el crucero o temporada de pesca.

::: fragment
::: callout-note
## Conditional age-at-length (CAAL)

CAAL es justamente la información talla-edad (clave talla edad).
:::
:::

::: fragment
El esfuerzo de muestreo se representa con `Neff`. Por ejemplo: número de viajes muestreados, o el no. de individuos muestreados por talla (del submuestreo de edades).
:::

## Información de índices

```{r eval = FALSE}
# Indice agregado:
input_data$agg_indices = matrix(mis_datos, ncol = input_data$n_indices, nrow = n_years) # Obs
input_data$index_cv = matrix(mis_datos, ncol = input_data$n_indices, nrow = n_years) # Obs error
# Información adicional:
input_data$units_indices = matrix(0L, nrow = n_years, ncol = input_data$n_indices) # 0 = numbers, 1 = biomass
input_data$fracyr_indices = matrix(0.5, ncol = data$n_indices, nrow = n_years) # fraccion del year
# Composicion por edades (proporcion)
input_data$index_paa = array(mis_datos, dim = c(input_data$n_indices, n_years, n_ages)) # Obs
input_data$index_Neff = matrix(mis_datos, ncol = input_data$n_indices, nrow = n_years) # Obs error
# Composicion por tallas (proporcion)
input_data$index_pal = array(mis_datos, dim = c(input_data$n_indices, n_years, n_lengths)) # Obs
input_data$index_NeffL = matrix(mis_datos, ncol = input_data$n_indices, nrow = n_years) # Obs error
# Conditional age-at-length (CAAL, proporcion)
input_data$index_caal = array(mis_datos, dim = c(input_data$n_indices, n_years, n_lengths, n_ages)) # Obs
input_data$index_caal_Neff = array(mis_datos, dim = c(n_years, input_data$n_indices, n_lengths)) # Obs error
# Aging error matrix
input_data$index_aging_error = array(mis_datos, dim = c(input_data$n_indices, n_ages, n_ages)) 
```

## Activar datos

```{r eval = FALSE}
# Para pesquerias
input_data$use_agg_catch = matrix(mi_activar, nrow = n_years, ncol = n_fleets) # 1 = usar, 0 = no usar
input_data$use_catch_paa = matrix(mi_activar, nrow = n_years, ncol = n_fleets) # 1 = usar, 0 = no usar
input_data$use_catch_pal = matrix(mi_activar, nrow = n_years, ncol = n_fleets) # 1 = usar, 0 = no usar
input_data$use_catch_caal = array(mi_activar, dim = c(n_years, n_fleets, n_lengths)) # 1 = usar, 0 = no usar
input_data$use_catch_aging_error = rep(1, times = input_data$n_fleets) # 1 = si usar, 0 = no usar
# Para indices
input_data$use_indices = matrix(mi_activar, nrow = n_years, ncol = n_indices) # 1 = usar, 0 = no usar
input_data$use_index_paa = matrix(mi_activar, nrow = n_years, ncol = n_indices) # 1 = usar, 0 = no usar
input_data$use_index_pal = matrix(mi_activar, nrow = n_years, ncol = n_indices) # 1 = usar, 0 = no usar
input_data$use_index_caal = array(mi_activar, dim = c(n_years, n_indices, n_lengths)) # 1 = usar, 0 = no usar
input_data$use_index_aging_error = rep(1, times = input_data$n_indices) # 1 = si usar, 0 = no usar
```

::: fragment
::: callout-warning
## Cuidado

Si no se incluyen datos de `pal` o `caal`, entonces el `use` será 0 automáticamente. Sin embargo, para `paa`, WHAM asigna `use` igual a 1 (activo) incluso si no incluimos datos de composición por edad. Por lo tanto, si no se desea usar datos de `paa`, especificar explicitamente `use_paa` igual a 0.
:::
:::

## Selectividad pointers

<br>

Tenemos que especificar los *pointers* para los modelos de selectividad:

```{r eval = FALSE}
input_data$selblock_pointer_fleets = matrix(my_pointers, ncol = input_data$n_fleets, nrow = n_years)
input_data$selblock_pointer_indices = matrix(my_pointers, ncol = input_data$n_indices, nrow = n_years)
```

<br>

::: fragment
En palabras sencillas, es un tipo de indexación para saber que modelo de selectividad usará, por ejemplo, la pesquería 1, 2, 3, y el índice 1, 2 (ver sección de parámetros).
:::

## Peso a la edad

Puede ser tratado como empirical weight-at-age (asumimos que no tiene error) o como observaciones (error de observación asociado, `waa_cv`):

```{r eval = FALSE}
input_data$waa = array(mis_datos, dim = c(n_waa, n_years, n_ages))
input_data$waa_pointer_fleets = my_pointer_1 #length = n_fleets. 
input_data$waa_pointer_indices = my_pointer_2 #length = n_indices. 
input_data$waa_pointer_totcatch = my_pointer_3 #length = 1 
input_data$waa_pointer_ssb = my_pointer_4 #length = 1 
input_data$waa_pointer_jan1 = my_pointer_5 #length = 1 
input_data$waa_cv = array(mis_datos, dim = c(n_waa, n_years, n_ages)) # obs error
```

Los `my_pointer`, al igual que para selectividad, es una forma de indexación (que matrix de peso a la edad va a usar cierta pesquería o índice).

## Información adicional

<br>

```{r eval = FALSE}
input_data$maturity = matrix(mis_datos, nrow = n_years, ncol = n_ages) # madurez sexual
input_data$fracyr_SSB = matrix(mis_datos, ncol = 1, nrow = n_years) # fraction of year SSB
input_data$Fbar_ages = mis_datos # edades para calcular Fbar
input_data$percentSPR = 40 # % SPR reference point
input_data$percentFMSY = 100 # percent of FMSY to use for calculating catch in projections
input_data$simulate_period = c(1,0) # simulation for 1: model period, 2: projection
input_data$bias_correct_process = 1 # do process bias correction, 0 = no, 1 = yes
input_data$bias_correct_observation = 1 # do obs bias correction, 0 = no, 1 = yes 
```

# Laboratorio

## Creación de grupos de trabajo

<br>

::: columns
::: {.column width="50%"}
Grupo 1:

-   Luis Cubillos
-   Vania Henriquez
-   Carlos Torres
-   Rene Chura
:::

::: {.column width="50%"}
Grupo 2:

-   Victor Vargas
-   Francisco Córdova
-   Maria Jose Cuevas
-   Juan Anton
-   Yasmine Granda
:::
:::

## Proyecto en clase

<br>

Se le entregarán datos simulados (3 casos).

Objetivo para el día de hoy:

-   Explorar los datos
-   Discutir enfoques de modelado para cada caso
-   Hacer consultas pertinentes para implementar el modelo


## Referencias
